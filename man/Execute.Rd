% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exec-.R
\name{Execute}
\alias{Execute}
\title{R6 Class to invoke a series of system command}
\description{
R6 Class to invoke a series of system command

R6 Class to invoke a series of system command
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Execute-new}{\code{Execute$new()}}
\item \href{#method-Execute-get_commands}{\code{Execute$get_commands()}}
\item \href{#method-Execute-pipe}{\code{Execute$pipe()}}
\item \href{#method-Execute-help}{\code{Execute$help()}}
\item \href{#method-Execute-run}{\code{Execute$run()}}
\item \href{#method-Execute-setup_wd}{\code{Execute$setup_wd()}}
\item \href{#method-Execute-setup_envvar}{\code{Execute$setup_envvar()}}
\item \href{#method-Execute-setup_envpath}{\code{Execute$setup_envpath()}}
\item \href{#method-Execute-clone}{\code{Execute$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-new"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{Execute} object. User shouln't call this function
directly, just call other command function which should return a
\code{Execute} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$new(command)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{command}}{A \link{Command} object.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{Execute} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-get_commands"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-get_commands}{}}}
\subsection{Method \code{get_commands()}}{
Get the list of \link{Command} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$get_commands()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of \link{Command} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-pipe"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-pipe}{}}}
\subsection{Method \code{pipe()}}{
Use \code{|} to connect two command
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$pipe(command)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{command}}{A \link{Command} or \code{Execute} object to stream \code{stdout}
into. Note: If \code{command} is a \code{Execute} object, the associated
environment variables and working directory will be loss.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{Execute} object self, with command list updated.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-help"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-help}{}}}
\subsection{Method \code{help()}}{
Print the help document for this command.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$help(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{A bool indicates whether to print running command message.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Exit status.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-run"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-run}{}}}
\subsection{Method \code{run()}}{
Execute command
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$run(
  stdout = TRUE,
  stderr = TRUE,
  stdin = "",
  timeout = 0L,
  verbose = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{stdout, stderr}}{Where output to ‘stdout’ or ‘stderr’ should be
sent. Possible values are:
\itemize{
\item \code{TRUE}: print child output in R console
\item \code{FALSE}: suppress output stream
\item \strong{string}: name or path of file to redirect output
}}

\item{\code{stdin}}{should input be diverted? \code{""} means the default,
alternatively a character string naming a file. Ignored if input is
supplied.}

\item{\code{timeout}}{Timeout in seconds, ignored if 0. This is a limit for
the elapsed time running command in a separate process. Fractions of
seconds are ignored.}

\item{\code{verbose}}{A bool indicates whether to print running command message.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Exit status.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-setup_wd"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-setup_wd}{}}}
\subsection{Method \code{setup_wd()}}{
Method used to change working directory
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$setup_wd(wd)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wd}}{A string or NULL define the working directory of the
command.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{Execute} object self, with working directory updated.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-setup_envvar"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-setup_envvar}{}}}
\subsection{Method \code{setup_envvar()}}{
Method used to create environment variables
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$setup_envvar(..., action = "replace", sep = " ")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Named character define the environment variables.}

\item{\code{action}}{Should new values "replace", "prefix" or "suffix"
existing variables with the same name?}

\item{\code{sep}}{A string to separate new and old value.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{Execute} object self, with running environment variable
updated.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-setup_envpath"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-setup_envpath}{}}}
\subsection{Method \code{setup_envpath()}}{
Method used to create PATH environment character
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$setup_envpath(..., action = "prefix", name = "PATH")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Unnamed character to define the \code{PATH-like} environment
variables \code{name}.}

\item{\code{action}}{Should new values "replace", "prefix" or "suffix"
existing variables with the same name?}

\item{\code{name}}{A string define the PATH environment variable name. YOu
can use this to define other \code{PATH-like} environment variable such as
\code{PYTHONPATH}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{Execute} object self, with running environment variable
\code{name} updated.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Execute-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Execute-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execute$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
