% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmd-run.R
\name{cmd_run}
\alias{cmd_run}
\alias{cmd_help}
\alias{cmd_background}
\title{Execute command}
\usage{
cmd_run(
  command,
  stdout = TRUE,
  stderr = TRUE,
  stdin = NULL,
  stdout_callback = NULL,
  stderr_callback = NULL,
  timeout = NULL,
  spinner = FALSE,
  verbose = TRUE
)

cmd_help(
  command,
  stdout,
  stderr,
  stdout_callback = NULL,
  stderr_callback = NULL,
  verbose = TRUE
)

cmd_background(command, stdout, stderr, stdin = NULL, verbose = TRUE)
}
\arguments{
\item{command}{A \code{command} object.}

\item{stdout, stderr}{Specifies how the output streams of the child process
are handled. Possible values include:
\itemize{
\item \code{TRUE}: Prints the child process output to the R console.
\item \code{FALSE}: Suppresses the output stream.
\item \strong{string}: A file name or path to redirect the output. If a relative path
is specified, it remains relative to the current working directory, even
if a different directory is set using \code{\link[=cmd_wd]{cmd_wd()}}.
\item \code{connection}: A writable R \code{\link{connection}} object. If the connection is not
\code{\link[=open]{open()}}, it will be automatically opened.
}

For \code{cmd_help()}, only a file path (string) or a \code{connection} can be used.

For \code{cmd_background()}, only a file path (string) or a single boolean value
is allowed.

When using a \code{connection} (if not already open) or a \code{string}, wrapping it
with \code{\link[=I]{I()}} prevents overwriting existing content.

The \code{stderr} parameter also accepts \code{NULL}, which redirects it to the same
connection (i.e., pipe or file) as \code{stdout}.}

\item{stdin}{should the input be diverted? Possible values include:
\itemize{
\item \code{NULL}: No standard input.
\item \strong{string}: A file name or path to be used as standard input.
}}

\item{stdout_callback, stderr_callback}{Possible values include:
\itemize{
\item \code{NULL}: no callback function.
\item \code{function}: A function invoked for each line of standard output or error.
Non-text (non-character) output will be ignored. The function should accept
two arguments: one for the standard output or error and another for the
running \code{\link[processx:process]{process}} object.
}}

\item{timeout}{Timeout in seconds. This is a limit for the elapsed time
running command in the separate process.}

\item{spinner}{Whether to show a reassuring spinner while the process
is running.}

\item{verbose}{A single boolean value indicating whether the command
execution should be verbose.}
}
\value{
\itemize{
\item \code{cmd_run}: Exit status invisiblely.
}

\itemize{
\item \code{cmd_help}: The input \code{command} invisiblely.
}

\itemize{
\item \code{cmd_background}: A \code{\link[processx:process]{process}} object.
}
}
\description{
\itemize{
\item \code{cmd_run}: Run the command.
\item \code{cmd_help}: Print the help document for this command.
\item \code{cmd_background}: Run the command in the background.
}
}
\seealso{
\itemize{
\item \code{\link[=cmd_wd]{cmd_wd()}}/\code{\link[=cmd_envvar]{cmd_envvar()}}/\code{\link[=cmd_envpath]{cmd_envpath()}}
\item \code{\link[=cmd_parallel]{cmd_parallel()}}
}
}
